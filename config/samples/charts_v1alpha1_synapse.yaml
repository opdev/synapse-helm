apiVersion: charts.opdev.io/v1alpha1
kind: Synapse
metadata:
  name: synapse-sample
spec:
  # Default values copied from <project_dir>/helm-charts/matrix/values.yaml
  bridges:
    affinity: false
    discord:
      auth:
        botToken: ""
        clientId: ""
      channelName: '[Discord] :guild :name'
      data:
        capacity: 512Mi
        storageClass: ""
      defaultVisibility: public
      enabled: false
      image:
        pullPolicy: Always
        repository: halfshot/matrix-appservice-discord
        tag: latest
      joinLeaveEvents: true
      presence: true
      readReceipt: true
      replicaCount: 1
      resources: {}
      selfService: false
      service:
        port: 9005
        type: ClusterIP
      typingNotifications: true
      users:
        nickname: :nick
        username: :username#:tag
    irc:
      data:
        capacity: 1Mi
      database: matrix_irc
      databaseSslVerify: true
      enabled: false
      image:
        pullPolicy: IfNotPresent
        repository: matrixdotorg/matrix-appservice-irc
        tag: release-0.26.0
      presence: false
      replicaCount: 1
      resources: {}
      servers:
        chat.freenode.net:
          name: Freenode
          port: 6697
          ssl: true
      service:
        port: 9006
        type: ClusterIP
    volume:
      accessMode: ReadWriteMany
      capacity: 1Mi
      storageClass: ""
    whatsapp:
      bot:
        avatar: mxc://maunium.net/NeXNQarUbrlYBiPCpprYsRqr
        displayName: WhatsApp bridge bot
        username: whatsappbot
      callNotices: true
      communityName: whatsapp_{{.Localpart}}={{.Server}}
      connection:
        maxAttempts: 3
        qrRegenCount: 2
        reportRetry: true
        retryDelay: -1
        timeout: 20
      data:
        capacity: 512Mi
        storageClass: ""
      enabled: false
      image:
        pullPolicy: Always
        repository: dock.mau.dev/tulir/mautrix-whatsapp
        tag: latest
      permissions:
        '*': relaybot
      relaybot:
        enabled: false
        invites: []
        management: '!foo:example.com'
      replicaCount: 1
      resources: {}
      service:
        port: 29318
        type: ClusterIP
      users:
        displayName: '{{if .Notify}}{{.Notify}}{{else}}{{.Jid}}{{end}} (WA)'
        username: whatsapp_{{.}}
  coturn:
    allowGuests: true
    enabled: true
    image:
      pullPolicy: IfNotPresent
      repository: coturn/coturn
      tag: 4.5.2
    kind: DaemonSet
    labels:
      component: coturn
    ports:
      from: 49152
      to: 49172
    replicaCount: 1
    resources: {}
    service:
      type: ClusterIP
    sharedSecret: ChangeMe
    uris: []
  fullnameOverride: ""
  imagePullSecrets: []
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/configuration-snippet: |
        proxy_intercept_errors off;
    enabled: true
    federation: true
    hosts:
      federation: matrix-fed.chart-example.local
      riot: element.chart-example.local
      synapse: matrix.chart-example.local
    tls: []
  mail:
    enabled: true
    external:
      host: ""
      password: ""
      port: 25
      requireTransportSecurity: true
      username: ""
    from: Matrix <matrix@example.com>
    relay:
      enabled: true
      image:
        pullPolicy: IfNotPresent
        repository: devture/exim-relay
        tag: 4.94.2-r0-1
      labels:
        component: mail
      probes:
        liveness: {}
        readiness: {}
        startup: {}
      replicaCount: 1
      resources: {}
      service:
        port: 25
        type: ClusterIP
    riotUrl: ""
  matrix:
    adminEmail: admin@example.com
    blockNonAdminInvites: false
    disabled: false
    disabledMessage: ""
    encryptByDefault: invite
    federation:
      allowPublicRooms: true
      blacklist:
      - 127.0.0.0/8
      - 10.0.0.0/8
      - 172.16.0.0/12
      - 192.168.0.0/16
      - 100.64.0.0/10
      - 169.254.0.0/16
      - ::1/128
      - fe80::/64
      - fc00::/7
      enabled: true
    logging:
      rootLogLevel: WARNING
      sqlLogLevel: WARNING
      synapseLogLevel: WARNING
    presence: true
    registration:
      allowGuests: false
      autoJoinRooms: []
      enabled: false
    retentionPeriod: 7d
    search: true
    security:
      surpressKeyServerWarning: true
    serverName: example.com
    telemetry: false
    uploads:
      maxPixels: 32M
      maxSize: 10M
    urlPreviews:
      enabled: false
      rules:
        ip:
          blacklist:
          - 127.0.0.0/8
          - 10.0.0.0/8
          - 172.16.0.0/12
          - 192.168.0.0/16
          - 100.64.0.0/10
          - 169.254.0.0/16
          - ::1/128
          - fe80::/64
          - fc00::/7
        maxSize: 10M
        url: {}
  nameOverride: ""
  networkPolicies:
    enabled: true
  postgresql:
    database: matrix
    enabled: true
    extraEnv: []
    global:
      postgresql: {}
    hostname: ""
    image:
      debug: false
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: bitnami/postgresql
      tag: 11.6.0-debian-9-r0
    initdbScriptsConfigMap: '{{ .Release.Name }}-postgresql-initdb'
    ldap:
      baseDN: ""
      bindDN: ""
      enabled: false
      port: ""
      prefix: ""
      scheme: ""
      search_attr: ""
      search_filter: ""
      server: ""
      suffix: ""
      tls: false
      url: ""
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    master:
      affinity: {}
      annotations: {}
      extraInitContainers: ""
      extraVolumeMounts: []
      extraVolumes: []
      labels: {}
      nodeSelector: {}
      podAnnotations: {}
      podLabels: {}
      tolerations: []
    metrics:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: bitnami/postgres-exporter
        tag: 0.7.0-debian-9-r12
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      securityContext:
        enabled: false
        runAsUser: 1001
      service:
        annotations:
          prometheus.io/port: "9187"
          prometheus.io/scrape: "true"
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
    networkPolicy:
      allowExternal: true
      enabled: false
    password: matrix
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      mountPath: /bitnami/postgresql
      size: 8Gi
      subPath: ""
    port: 5432
    postgresqlDataDir: /bitnami/postgresql/data
    postgresqlPassword: ChangeMe!
    postgresqlUsername: postgres
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replication:
      applicationName: my_application
      enabled: false
      numSynchronousReplicas: 0
      password: repl_password
      slaveReplicas: 1
      synchronousCommit: "off"
      user: repl_user
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
    securityContext:
      enabled: true
      fsGroup: 1000
      runAsUser: 1000
    service:
      annotations: {}
      port: 5432
      type: ClusterIP
    serviceAccount:
      enabled: false
    shmVolume:
      enabled: true
    slave:
      affinity: {}
      annotations: {}
      extraInitContainers: ""
      extraVolumeMounts: []
      extraVolumes: []
      labels: {}
      nodeSelector: {}
      podAnnotations: {}
      podLabels: {}
      tolerations: []
    ssl: false
    sslMode: prefer
    updateStrategy:
      type: RollingUpdate
    username: matrix
    volumePermissions:
      enabled: true
      image:
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/minideb
        tag: stretch
      securityContext:
        runAsUser: 0
  riot:
    branding:
      authFooterLinks: []
      authHeaderLogoUrl: ""
      brand: Element
      welcomeBackgroundUrl: ""
    enabled: true
    image:
      pullPolicy: IfNotPresent
      repository: vectorim/riot-web
      tag: v1.7.30
    integrations:
      api: https://scalar.vector.im/api
      enabled: true
      ui: https://scalar.vector.im/
      widgets:
      - https://scalar.vector.im/_matrix/integrations/v1
      - https://scalar.vector.im/api
      - https://scalar-staging.vector.im/_matrix/integrations/v1
      - https://scalar-staging.vector.im/api
      - https://scalar-staging.riot.im/scalar/api
    labels:
      component: element
    labs:
    - feature_new_spinner
    - feature_pinning
    - feature_custom_status
    - feature_custom_tags
    - feature_state_counters
    - feature_many_integration_managers
    - feature_mjolnir
    - feature_dm_verification
    - feature_bridge_state
    - feature_presence_in_room_list
    - feature_custom_themes
    permalinkPrefix: https://matrix.to
    probes:
      liveness: {}
      readiness: {}
      startup: {}
    replicaCount: 1
    resources: {}
    roomDirectoryServers:
    - matrix.org
    service:
      port: 80
      type: ClusterIP
    welcomeUserId: ""
  synapse:
    image:
      pullPolicy: IfNotPresent
      repository: matrixdotorg/synapse
      tag: v1.35.1
    labels:
      component: synapse
    metrics:
      annotations: true
      enabled: true
      port: 9092
    probes:
      liveness:
        periodSeconds: 10
        timeoutSeconds: 5
      readiness:
        periodSeconds: 10
        timeoutSeconds: 5
      startup:
        failureThreshold: 6
        periodSeconds: 5
        timeoutSeconds: 5
    replicaCount: 1
    resources: {}
    service:
      federation:
        port: 80
        type: ClusterIP
      port: 80
      type: ClusterIP
  volumes:
    media:
      capacity: 10Gi
      storageClass: ""
    signingKey:
      capacity: 1Mi
      storageClass: ""
  
  
